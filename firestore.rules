rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // can create user if and only if they have a valid user (which involves having a valid username)
    match /users/{userId} {
        allow create: if request.auth.uid == userId && isUniqueUsernameAndOwner(request.resource.data.username) && request.auth != null;
      	allow read: if request.auth != null;
        allow update: if request.auth.uid == userId  && request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;

      // Subcollection: followRequests
      match /followRequests/{requesterId} {
        allow create: if request.auth != null && request.auth.uid == requesterId;
        allow read: if request.auth != null && (request.auth.uid == userId || request.auth.uid == requesterId);
        allow delete: if request.auth != null && (request.auth.uid == userId || request.auth.uid == requesterId);
      }

      match /followers/{followerId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null && (request.auth.uid == userId || request.auth.uid == followerId);
      }

      match /following/{followingId} {
        allow create: if request.auth != null && request.auth.uid == followingId;
        allow read: if request.auth != null;
        allow delete: if request.auth != null && (request.auth.uid == userId || request.auth.uid == followingId);
      }

      match /notifications/{notificationId} {
        // Only the sender may create a notification for the intended recipient
        allow create: if request.auth != null
                      && request.auth.uid == request.resource.data.fromUserId
                      && request.resource.data.toUserId == userId;
        // Only the recipient may read or delete their notifications
        allow read, delete: if request.auth != null
                           && request.auth.uid == userId;
      }
    }

    // makes sure that only unique usernames can be added to usernames
    match /usernames/{username} {
      allow create: if isUniqueUsernameAndOwner(username);
      allow read;
    }

    match /moodEvents/{eventId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow read;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
    }

    match /comments/{commentId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow read;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
    }

    // Function to ensure a user can create an account with a unique username
    function isUniqueUsernameAndOwner(username) {
      let isOwner = request.auth.uid == request.resource.data.uid;

      // Check if username already exists in the database
      let usernameNotExists = !exists(/databases/$(database)/documents/usernames/$(username));

      return isOwner && usernameNotExists;
    }
  }
}

